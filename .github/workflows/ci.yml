name: Moodle Plugin CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-18.04

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_USER: 'postgres'
          POSTGRES_HOST_AUTH_METHOD: 'trust'
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
      mariadb:
        image: mariadb:10
        env:
          MYSQL_USER: 'root'
          MYSQL_ALLOW_EMPTY_PASSWORD: "true"
          MYSQL_CHARACTER_SET_SERVER: "utf8mb4"
          MYSQL_COLLATION_SERVER: "utf8mb4_unicode_ci"

        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 3

    strategy:
      fail-fast: false
      matrix:
        php: ['7.3', '7.4', '8.0']
        moodle-branch: ['MOODLE_311_STABLE']
        database: [pgsql, mariadb]
        node-version: ['17', '18', '19']

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          path: plugin

      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ matrix.extensions }}
          ini-values: max_input_vars=5000
          coverage: none

      - name: Initialise moodle-plugin-ci
        run: |
          composer create-project -n --no-dev --prefer-dist moodlehq/moodle-plugin-ci ci ^3
          echo $(cd ci/bin; pwd) >> $GITHUB_PATH
          echo $(cd ci/vendor/bin; pwd) >> $GITHUB_PATH
          sudo locale-gen en_AU.UTF-8
          echo "NVM_DIR=$HOME/.nvm" >> $GITHUB_ENV

      - name: Install moodle-plugin-ci
        run: |
          moodle-plugin-ci install --plugin ./plugin --db-host=127.0.0.1
        env:
          DB: ${{ matrix.database }}
          MOODLE_BRANCH: ${{ matrix.moodle-branch }}

      - name: Install moosh
        run : |
          sudo apt-get install software-properties-common 
          sudo apt-add-repository ppa:zabuch/ppa
          sudo apt-get update
          sudo apt-get install moosh

      - name: Install jq
        run : |
          sudo apt-get install jq 

      - name: Install Node JS ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Newman dependency
        run: npm install --prefix moodle/mod/arete/tests/postman/ newman

      - name: Install Moodle
        run: cd moodle && sudo -u www-data /usr/bin/php admin/cli/install_database.php --lang=en --adminpass=${{ secrets.MOODLE_ADMIN_PASSWORD }} --agree-license

      - name: Activate REST services
        run : |
          cd moodle/mod/arete
          sudo -u www-data moosh -n config-set enablewebservices 1
          sudo -u www-data moosh -n config-set webserviceprotocols 'rest'
          sudo -u www-data moosh -n role-update-capability user moodle/webservice:createtoken allow 1
          sudo -u www-data moosh -n role-update-capability user webservice/rest:use allow 1

      - name: PHP Lint
        if: ${{ false }}
        run: moodle-plugin-ci phplint

      - name: PHP Copy/Paste Detector
        continue-on-error: true # This step will show errors but will not fail
        if: ${{ false }}
        run: moodle-plugin-ci phpcpd

      - name: PHP Mess Detector
        continue-on-error: true # This step will show errors but will not fail
        if: ${{ false }}
        run: moodle-plugin-ci phpmd

      - name: Moodle Code Checker
        if: ${{ false }}
        run: moodle-plugin-ci codechecker --max-warnings 0

      - name: Moodle PHPDoc Checker
        if: ${{ false }}
        run: moodle-plugin-ci phpdoc

      - name: Validating
        if: ${{ false }}
        run: moodle-plugin-ci validate

      - name: Check upgrade savepoints
        if: ${{ false }}
        run: moodle-plugin-ci savepoints

      - name: Mustache Lint
        if: ${{ false }}
        run: moodle-plugin-ci mustache

      - name: Grunt
        if: ${{ false }}
        run: moodle-plugin-ci grunt --max-lint-warnings 0

      - name: PHPUnit tests
        if: ${{ false }}
        run: moodle-plugin-ci phpunit --fail-on-warning

      - name: Behat features
        if: ${{ false }}
        run: moodle-plugin-ci behat --profile chrome

      - name: Empty caches
        run: |
          cd moodle
          php admin/cli/purge_caches.php

      - name: Is there apache?
        run: |
          pushd /etc
          find . -type f | grep -i apache

      - name: restart apache
        run: |
          sudo systemctl restart apache2 && sudo systemctl status apache2

      - name: IP address
        run: |
          ip address

      - name: Netstat
        run: |
          netstat -tulpn

      - name: cat config
        run: |
          cd moodle && cat config.php

      - name: generate moodle.conf
        run: |
          cd /etc/apache2/sites-available/ && sudo touch moodle.conf && sudo printf "<VirtualHost *:80>\n ServerName www.example.com\n  ServerAlias *\n  DocumentRoot /home/runner/work/moodle-mod_arete/moodle-mod_arete/\n<Directory "/home/runner/work/moodle-mod_arete/moodle-mod_arete/moodle">\n    Options -Indexes +FollowSymLinks -MultiViews\n    AllowOverride All\n    Require all granted\n  </Directory>\n</VirtualHost>\n" | sudo tee moodle.conf

      - name: connect apache and moodle
        run: |
          sudo a2ensite moodle.conf

      - name: reload apache
        run: |
          sudo systemctl reload apache2 && sudo systemctl status apache2

      - name: apache php settings
        run: |
          sudo a2enmod proxy_fcgi setenvif
          sudo a2enconf php${{ matrix.php }}-fpm
          sudo service apache2 restart

      - name: sites available
        run: |
          sudo ls /etc/apache2/sites-available/

      - name: Is apache config working?
        run: |
          apachectl -S

      - name: sites enabled
        run: |
          sudo ls /etc/apache2/sites-enabled/ && cat /etc/apache2/sites-enabled/moodle.conf

      - name: cat moodle.conf
        run: |
          cat /etc/apache2/sites-available/moodle.conf

      - name: ls moodle folder
        run: |
          ls /home/runner/work/moodle-mod_arete/moodle-mod_arete

      - name: Generate test user
        run: |
          cd moodle/mod/arete
          sudo -u www-data moosh -n user-create --password ${{ secrets.TEST_USER_PASSWORD }} --email test_user@example.com --city "Milton Keynes" --country GB --institution "Open University" --department "IET" --firstname "first" --lastname "last" testuser && sudo -u www-data moosh -n role-update-capability testuser moodle/webservice:createtoken allow 1

      - name: Does it generate a token using curl?
        run: |
          curl -X GET 'http://localhost/moodle/login/token.php?username=testuser&password=${{ secrets.TEST_USER_PASSWORD }}&service=aretews'

      - name: Curl
        run: |
          curl -X GET http://127.0.0.1/moodle/

      - name: Run the API and Postman's tests
        run: |
          cd moodle/mod/arete/tests/postman/ && ./node_modules/newman/bin/newman.js run --verbose "Moodle Arete.postman_collection.json" --env-var USER_ID=3 --env-var TEST_USER_PASSWORD=${{ secrets.TEST_USER_PASSWORD }} --env-var TOKEN=$(curl -X GET 'http://localhost/moodle/login/token.php?username=testuser&password=${{ secrets.TEST_USER_PASSWORD }}&service=aretews'| jq ".token" | sed s/\"//g)
        env:
          CI: true
